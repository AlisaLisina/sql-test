13.08.2022
-- Query all columns for all American cities in the CITY table with population large then 100000. 
SELECT * 
FROM CITY 
WHERE POPULATION > 100000 AND COUNTRYCODE = 'USA';

-- Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
SELECT NAME 
FROM CITY 
WHERE POPULATION > 120000 AND COUNTRYCODE = 'USA';

-- Query all columns (attributes) for every row in the CITY table.
SELECT * 
FROM CITY;

-- Query all columns for a city in CITY with the ID 1661.
SELECT * 
FROM CITY 
WHERE ID = 1661;

-- Query all attributes of every Japanese city in the CITY table.
SELECT * 
FROM CITY 
WHERE COUNTRYCODE = 'JPN';

-- Query the names of all the Japanese cities in the CITY table.
SELECT NAME
FROM CITY 
WHERE COUNTRYCODE = 'JPN';

-- Query a list of CITY and STATE from the STATION table.
SELECT CITY, STATE
FROM STATION;

-- Query a list of CITY names from STATION for cities that have an even ID number. 
-- Print the results in any order, but exclude duplicates from the answer.
SELECT DISTINCT CITY 
FROM STATION 
WHERE ID % 2 = 0;

-- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT COUNT(CITY) - COUNT(DISTINCT CITY)
FROM STATION;

-- Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
SELECT TOP 1 CITY, LEN(CITY) 
FROM STATION 
ORDER BY LEN(CITY),CITY; 

SELECT TOP 1 CITY, LEN(CITY) 
FROM STATION 
ORDER BY LEN(CITY) DESC,CITY;

14.08.2022
-- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION 
WHERE CITY LIKE '[A,E,I,O,U]%';

-- Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY LIKE '%[A,E,I,O,U]';

-- Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY LIKE '[A,E,I,O,U]%' AND CITY LIKE '%[A,E,I,O,U]';

-- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION 
WHERE CITY NOT LIKE '[A,E,I,O,U]%';

-- Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION 
WHERE CITY NOT LIKE '%[A,E,I,O,U]';

-- Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY NOT LIKE '[A,E,I,O,U]%' OR CITY NOT LIKE '%[A,E,I,O,U]';

-- Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION 
WHERE CITY NOT LIKE '[A,E,I,O,U]%' AND CITY NOT LIKE '%[A,E,I,O,U]';

-- Query the Name of any student in STUDENTS who scored higher than 75 Marks. 
-- Order your output by the last three characters of each name. 
-- If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT NAME
FROM STUDENTS 
WHERE MARKS > 75
ORDER BY SUBSTRING(NAME, LEN(NAME)-2, 3), ID ASC;

-- Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT NAME 
FROM EMPLOYEE 
ORDER BY NAME ASC;

-- Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000 per month who have been employees for less than 10 months. 
-- Sort your result by ascending employee_id.
SELECT NAME 
FROM EMPLOYEE 
WHERE SALARY > 2000 AND MONTHS < 10;

15.08.2022
-- Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT NAME 
FROM EMPLOYEE
ORDER BY NAME ASC;

-- Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
SELECT CITY.NAME
FROM CITY
JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code 
WHERE CONTINENT = 'Africa';

-- Query a count of the number of cities in CITY having a Population larger than 100000.
SELECT COUNT(ID)
FROM CITY
WHERE POPULATION > 100000;

-- Query the total population of all cities in CITY where District is California.
SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';

-- Query the average population of all cities in CITY where District is California.
ELECT ROUND(AVG(CAST(POPULATION AS FLOAT)), 3)
FROM CITY
WHERE DISTRICT = 'California';

-- Query the average population for all cities in CITY, rounded down to the nearest integer.
SELECT ROUND(AVG(POPULATION),1)
FROM CITY;

-- Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = 'JPN';

-- Query the difference between the maximum and minimum populations in CITY.
SELECT MAX(POPULATION) - MIN(POPULATION)
FROM CITY;

-- Write a query calculating the amount of error (i.e.: ACTUAL - MISCALCULATED  average monthly salaries), and round it up to the next integer
SELECT CAST(CEILING((AVG(CAST(Salary AS Float)) - AVG(CAST(REPLACE(Salary, 0, '')AS Float)))) AS INT)
FROM EMPLOYEES;

-- Query the sum of the populations of all cities where the CONTINENT is 'Asia'.
SELECT SUM(CITY.POPULATION)
FROM CITY
JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code
WHERE CONTINENT = 'Asia';

17.08
-- Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
SELECT CITY.NAME
FROM CITY 
JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code 
WHERE CONTINENT = 'Africa';

-- Write a query to print the pattern P(20).
*****
****
***
**
*
DECLARE @i INT = 20
WHILE (@i > 0) 
BEGIN
   PRINT REPLICATE('* ', @i) 
   SET @i = @i - 1
END;

18.08
-- Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
SELECT SALARY*MONTHS, COUNT(EMPLOYEE_ID)
FROM EMPLOYEE
WHERE SALARY*MONTHS = (SELECT MAX(SALARY*MONTHS) FROM EMPLOYEE)
GROUP BY SALARY*MONTHS;
-- OR
SELECT TOP 1 SALARY*MONTHS SUS, COUNT(EMPLOYEE_ID)
FROM EMPLOYEE
GROUP BY SALARY*MONTHS
ORDER BY SUS DESC;

19.08
-- Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.
SELECT FORMAT(LONG_W, 'N4') 
FROM STATION 
WHERE LAT_N = (SELECT MAX(LAT_N)
	       FROM STATION
	       WHERE LAT_N < 137.2345);

-- Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places.
SELECT CAST(MAX(LAT_N) AS DECIMAL (10,4)) 
FROM STATION
WHERE LAT_N < 137.2345;

-- Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.
SELECT CAST(SUM(LAT_N) AS DECIMAL(10, 4))
FROM STATION
WHERE LAT_N BETWEEN 38.7880 AND 137.2345;

-- Query the following two values from the STATION table:
-- The sum of all values in LAT_N rounded to a scale of 2 decimal places.
-- The sum of all values in LONG_W rounded to a scale of 2 decimal places.
SELECT CAST(SUM(LAT_N) AS DECIMAL(10, 2)) AS LAT, CAST(SUM(LONG_W) AS DECIMAL(10, 2)) AS LON
FROM STATION;
